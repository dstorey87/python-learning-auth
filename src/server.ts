import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport rateLimit from 'express-rate-limit';\nimport { createClient } from '@supabase/supabase-js';\nimport { errorHandler } from './middleware/errorHandler';\nimport { notFound } from './middleware/notFound';\nimport { authRoutes } from './routes/auth';\nimport { sessionRoutes } from './routes/sessions';\n\nconst app = express();\nconst PORT = process.env.PORT || 8081;\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.SUPABASE_URL || '';\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || '';\n\nif (!supabaseUrl || !supabaseServiceKey) {\n  console.warn('⚠️ Supabase credentials not configured, authentication will be limited');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n    },\n  },\n}));\n\n// Rate limiting for auth endpoints (more restrictive)\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 50, // limit each IP to 50 auth requests per windowMs\n  message: 'Too many authentication attempts, please try again later.',\n});\n\n// General rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 500, // limit each IP to 500 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.',\n});\n\napp.use(limiter);\n\n// Body parsing middleware\napp.use(compression());\napp.use(express.json({ limit: '1mb' }));\napp.use(express.urlencoded({ extended: true, limit: '1mb' }));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? process.env.FRONTEND_URLS?.split(',') || []\n    : ['http://localhost:3000', 'http://localhost:3010'],\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n}));\n\n// Logging\napp.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'healthy', \n    service: 'auth',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    supabase: !!supabaseUrl && !!supabaseServiceKey\n  });\n});\n\n// Routes with rate limiting for auth endpoints\napp.use('/auth', authLimiter, authRoutes);\napp.use('/sessions', sessionRoutes);\n\n// Error handling\napp.use(notFound);\napp.use(errorHandler);\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`🚀 Auth Server running on port ${PORT}`);\n  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`📊 Health check: http://localhost:${PORT}/health`);\n  console.log(`🔐 Supabase configured: ${!!supabaseUrl && !!supabaseServiceKey}`);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('🛑 SIGTERM received, shutting down gracefully');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('🛑 SIGINT received, shutting down gracefully');\n  process.exit(0);\n});\n\nexport default app;